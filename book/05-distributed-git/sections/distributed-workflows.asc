=== Flujos de trabajo distribuidos

(((workflows)))
A diferencia de Sistemas Centralizados de Control de Versiones (CVCSs, Centralized Version Contrl Systems),la naturaleza distribuido de Git te permite mucha más felxiblidad en la manera de colaborar en proyectos.
En los sistemas centralizados, cada desarrolladdor es un nodo de trabajo más o menos en igualdad con un repositorio central. En Git, sin embargo, cada desarollador es potencialmente un nodo o un repositorio - es decir, cada desarrollador puede contribuir a otros repositorios y mantener un repositorio público en el cual otros pueden basar su trabajo y al cual pueden contribuir.

Esto abre un enorme rango de posibles flujos de trabajo para tu proyecto y/o tu equipo, así que revisaremos algunos de los paradigmas que toman ventajars de esta flexibilidad
Repasaremos las fortalezas y posibles debilidades de cada diseño; podrás elegir uno solo o podrás mezclarlos para escoger características concretas de cada uno.

==== Flujos de trabajo centralizado

(((workflows, centralized)))
En sistemas centralizados, habitualmente solo hay un modelo de colaboración - el flujo de trabajo centralizado. Un repositorio o punto central que acepta código y todos sincronizan su trabajo con él. Unos cuantos desarrolladores son nodos de trabajo - consumidores de dicho repositorio - y sincronizan con ese punto.


.Centralized workflow.
image::images/centralized.png[Centralized workflow.]

Esto significa que si dos desarrolladores clonan desde el punto central, y ambos hacen cambios, solo el primer desarrollador en subir sus cambios lo podrá hacer sin problemas.
El segundo desarrollador debe fusionar el trabajo del primero antes de subir sus cambios, para no sobreescribir los cambios del primero.
Este concepto es válido tanto en Git como en Subversion(((Subversion))) ( o cualquier otro CVCS, y este modelo funciona perfectamente bien en Git 

Si ya estás cómodo usando un flujo de trabajo centralizado en tu equipo o en tu empresa puedes continuar usando ese modo de trabajo con Git
Solamente tienes que configurar un único repositorio y darle a todo tu equipo acceso de actualización (push); Git no permitirá que los usuarios sobreescriban los cambios de los demás.

Digamos que John y Jessica empiezan a trabajar al mismo tiempo.
John termina sus cambios y los envía al servidor. Entonces Jessica intenta enviar sus cambios, pero el servidor los rechaza.

Le dice que está tratando de enviar cambios no directos (non-fast-forward) y que no se le permitirá hasta que no actualice su código (fetch) y lo fusione (merge) con los nuevos cambios.
Este flujo de trabajo es atractivo para mucha gente porque es un paradigma muy conocido y cómodo para ellos.


Este modo de trabajo no se limita a equipos pequeños. Con el modelo de ramas de Git es posible para cientos de desarrolladores trabajar con éxito en un solo proyecto a través de docenas de ramas simultáneamente.


[[_integration_manager]]
==== Flujo de trabajo del Responsable de integración

(((workflows, integration manager)))
Git permite multiples repositorios remotos, así es posible tener un flujo de trabajo donde cada desarrollador tiene permiso de escritura en su propio repositorio y acceso de lectura al de todos los demás.

Este escenario normalmente incluye un repositorio canónico que representa el proyecto ``oficial''.
Para contribuir a este proyecto crearás tu propio clón público del proyecto a donde enviarás los cambios.
Entonces, puedes enviar una petición al responsable del proyecto principal para que actualice (push) tus cambios.
El responsable puede añadir tu repositorio como un remoto, probar tus cambios localmente y añadirlos (merge) en su propia rama, entonces podrá enviarlos al repositorio principal.
El proceso es como sigue: (ver <<wfdiag_b>>):

1.  El responsable del proyecto envía a su repositorio público.
2.  Un colaborador clona ese repositorio y hace cambios.
3.  El colaborador envia los cambios a su propia copia pública
4.  El colaborador envía al responsable un e-mail pidiendo que añada los cambios.
5.  El responsable añade el repositorio del colaborador como un remoto y fusiona los cambios localmente.
6.  El responsable envia los cambios al repositorio principal.

[[wfdiag_b]]
.Integration-manager workflow.
image::images/integration-manager.png[Integration-manager workflow.]

(((forking)))
Este es un flujo de trabajo muy común con herramientas como Github o GitLab, donde es fácil hacer un fork del proyecto y enviar tus cambios a tu propio repositorio para que todos puedan verlos.
Una de las ventajas principales de esta aproximación es que puedes continuar trabajando y el responsable del repositorio principal puede añadir los cambios en cualquier momento.
Los colaboradores no tienen que esperar a que el proyecto incorpore sus cambios - cada parte puede trabajar a su propio ritmo.

==== Flujo de trabajo de Dictador y tenientes

(((workflows, dictator and lieutenants)))
Esta es una variante del flujo de trabajo de multiples repositorios.
Se usa habitualmante en proyectos enormes con cientos de colaboradores; uno de sus ejemplos más famoso es el kernel de Linux.
Varios responsables de intregación están a cargo de ciertas partes del repositorio; se les llama tenientes.
Todos los tenientes tienen un reponsable de integración conocido como el dictador benevolente.
El repositorio del dictador benevolente sirve como referencia del cual los colaboradores tienen que actualizar.
El proceso sería el que sigue: (ver <<wfdiag_c>>):

1.  Desarrolladores habituales trabajan en una rama concreta y avanzan su trabajo encima de la rama `master`.
	La rama `master` es la del dictador.
2.  Los tenientes fusionan las ramas de los desarrolladores en su rama `master`.
3.	El dictador fusiona las ramas `master` de los tenientes en la rama `master` del dictador
4.	El dictador envia su `master` al repositorio de referencia para que otros desarrolladores puedan trabajar en ella.

[[wfdiag_c]]
.Benevolent dictator workflow.
image::images/benevolent-dictator.png[Benevolent dictator workflow.]

Este tipo de flujo de trabajo no es común, pero puede ser útil en proyectos miy grandes, o en entornos altamente jerárquicos.
Permite al líder de proyectos, (el dictador) delegar la mayor parte del trabajo y recoger grandes cantidades de código de muchos puntos antes de integrarlos.

==== Resumen de flujos de trabajo

Estos son algunos de los flujos de trabajo que son posibles con un sistema distribuido como Git, pero puedes ver que hay muchas variaciones posibles que se adaptan a tu flujo de trabajo particular en la vida real.

Ahora que sabes, esperamos, determinar que flujo de trabajo puede funcionar para tí, cubriremos algunos ejemplos más específicos de como alcanzar los puntos principales que construyen los diferentes modos de trabajo.
En la próxima sección aprenderás unos cuantas directrices cómunes para contribuir a un proyecto.
