=== Flujos de trabajo distribuidos

(((workflows)))
A diferencia de Sistemas Centralizados de Control de Versiones (CVCSs, Centralized Version Control Systems),la naturaleza distribuido de Git te permite mucha más flexibilidad en la manera de colaborar en proyectos.
En los sistemas centralizados, cada desarrollador es un nodo de trabajo más o menos en igualdad con un repositorio central. En Git, sin embargo, cada desarrollador es potencialmente un nodo o un repositorio - es decir, cada desarrollador puede contribuir a otros repositorios y mantener un repositorio público en el cual otros pueden basar su trabajo y al cual pueden contribuir.

Esto abre un enorme rango de posibles flujos de trabajo para tu proyecto y/o tu equipo, así que revisaremos algunos de los paradigmas que toman ventajas de esta flexibilidad
Repasaremos las fortalezas y posibles debilidades de cada diseño; podrás elegir uno solo o podrás mezclarlos para escoger características concretas de cada uno.

==== Flujos de trabajo centralizado

(((workflows, centralized)))
En sistemas centralizados, habitualmente solo hay un modelo de colaboración - el flujo de trabajo centralizado. Un repositorio o punto central que acepta código y todos sincronizan su trabajo con él. Unos cuantos desarrolladores son nodos de trabajo - consumidores de dicho repositorio - y sincronizan con ese punto.


.Centralized workflow.
image::images/centralized.png[Centralized workflow.]

Esto significa que si dos desarrolladores clonan desde el punto central, y ambos hacen cambios, solo el primer desarrollador en subir sus cambios lo podrá hacer sin problemas.
El segundo desarrollador debe fusionar el trabajo del primero antes de subir sus cambios, para no sobreescribir los cambios del primero.
Este concepto es válido tanto en Git como en Subversion 
This concept is as true in Git as it is in Subversion(((Subversion))) (or any CVCS), and this model works perfectly well in Git.

Si ya está cómodo con un flujo de trabajo centralizado en su empresa o en su equipo, puede seguir utilizando fácilmente ese flujo de trabajo con Git.
Simplemente configure un único repositorio, y dé a cada uno en su equipo acceso de empuje; Git no permitirá que los usuarios se sobrescriban entre sí.
Digamos que John y Jessica empiezan a trabajar al mismo tiempo.
John termina su cambio y lo empuja al servidor.
Entonces Jessica intenta empujar sus cambios, pero el servidor los rechaza.
Le dicen que está tratando de empujar cambios no rápidos y que no podrá hacerlo hasta que busque y se fusione.
Este flujo de trabajo es atractivo para mucha gente porque es un paradigma que muchos están familiarizados y cómodos.

Esto tampoco se limita a los equipos pequeños. Con el modelo de ramificación de Git, es posible que cientos de desarrolladores trabajen con éxito en un único proyecto a través de docenas de ramas simultáneamente.

[[_integration_manager]]
==== Integration-Manager Workflow

(((workflows, integration manager)))
Because Git allows you to have multiple remote repositories, it's possible to have a workflow where each developer has write access to their own public repository and read access to everyone else's.
This scenario often includes a canonical repository that represents the ``official'' project.
To contribute to that project, you create your own public clone of the project and push your changes to it.
Then, you can send a request to the maintainer of the main project to pull in your changes.
The maintainer can then add your repository as a remote, test your changes locally, merge them into their branch, and push back to their repository.
The process works as follows (see <<wfdiag_b>>):

1.  The project maintainer pushes to their public repository.
2.  A contributor clones that repository and makes changes.
3.  The contributor pushes to their own public copy.
4.  The contributor sends the maintainer an e-mail asking them to pull changes.
5.  The maintainer adds the contributor's repo as a remote and merges locally.
6.  The maintainer pushes merged changes to the main repository.

[[wfdiag_b]]
.Integration-manager workflow.
image::images/integration-manager.png[Integration-manager workflow.]

(((forking)))
This is a very common workflow with hub-based tools like GitHub or GitLab, where it's easy to fork a project and push your changes into your fork for everyone to see.
One of the main advantages of this approach is that you can continue to work, and the maintainer of the main repository can pull in your changes at any time.
Contributors don't have to wait for the project to incorporate their changes – each party can work at their own pace.

==== Dictator and Lieutenants Workflow

(((workflows, dictator and lieutenants)))
This is a variant of a multiple-repository workflow.
It's generally used by huge projects with hundreds of collaborators; one famous example is the Linux kernel.
Various integration managers are in charge of certain parts of the repository; they're called lieutenants.
All the lieutenants have one integration manager known as the benevolent dictator.
The benevolent dictator's repository serves as the reference repository from which all the collaborators need to pull.
The process works like this (see <<wfdiag_c>>):

1.  Regular developers work on their topic branch and rebase their work on top of `master`.
    The `master` branch is that of the dictator.
2.  Lieutenants merge the developers' topic branches into their `master` branch.
3.  The dictator merges the lieutenants' `master` branches into the dictator's `master` branch.
4.  The dictator pushes their `master` to the reference repository so the other developers can rebase on it.

[[wfdiag_c]]
.Benevolent dictator workflow.
image::images/benevolent-dictator.png[Benevolent dictator workflow.]

This kind of workflow isn't common, but can be useful in very big projects, or in highly hierarchical environments.
It allows the project leader (the dictator) to delegate much of the work and collect large subsets of code at multiple points before integrating them.

==== Workflows Summary

These are some commonly used workflows that are possible with a distributed system like Git, but you can see that many variations are possible to suit your particular real-world workflow.
Now that you can (hopefully) determine which workflow combination may work for you, we'll cover some more specific examples of how to accomplish the main roles that make up the different flows.
In the next section, you'll learn about a few common patterns for contributing to a project.
