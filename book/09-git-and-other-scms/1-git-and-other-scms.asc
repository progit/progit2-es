== Git y Otros Sistemas

El mundo no es perfecto.
Por lo general, no se puede cambiar inmediatamente cada proyecto con el que está en contacto Git.
A veces estás atrapado en un proyecto usando otro VCS, y desearías poder usar Git.
Pasaremos la primera parte de este capítulo aprendiendo sobre cómo utilizar Git como cliente cuando el proyecto en el que se está trabajando está alojado en un sistema diferente.

En algún momento, puede que desees convertir tu proyecto existente a Git.
La segunda parte de este capítulo describe cómo migrar tu proyecto en Git desde varios sistemas específicos, así como un método que funcionará si no existe una herramienta de importación pre-construida.

=== Git as a Client

(((Git as a client)))
Git provides such a nice experience for developers that many people have figured out how to use it on their workstation, even if the rest of their team is using an entirely different VCS.
There are a number of these adapters, called ``bridges,'' available.
Here we'll cover the ones you're most likely to run into in the wild.

include::sections/client-svn.asc[]

include::sections/client-hg.asc[]

include::sections/client-p4.asc[]

include::sections/client-tfs.asc[]

[[_migrating]]
=== Migrating to Git

(((Migrating to Git)))
If you have an existing codebase in another VCS but you've decided to start using Git, you must migrate your project one way or another.
This section goes over some importers for common systems, and then demonstrates how to develop your own custom importer.
You'll learn how to import data from several of the bigger professionally used SCM systems, because they make up the majority of users who are switching, and because high-quality tools for them are easy to come by.

include::sections/import-svn.asc[]

include::sections/import-hg.asc[]

include::sections/import-p4.asc[]

include::sections/import-tfs.asc[]

include::sections/import-custom.asc[]

=== Summary

You should feel comfortable using Git as a client for other version-control systems, or importing nearly any existing repository into Git without losing data.
In the next chapter, we'll cover the raw internals of Git so you can craft every single byte, if need be.
